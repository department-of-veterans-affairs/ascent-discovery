server:
  port: ${discovery.server.port:8761}
info:  
  build:
    version:  "@project.version@"
    artifact: "@project.artifactId@"
    name: "@project.name@"
    description: "@project.description@"
#ssl:
#   key-store: classpath:/configServer.jks
#   key-store-password: configmein
#   key-password: configme
#   clientAuth: want
security:
  basic:
    enabled: true
  user:
      name: ${discovery.username:eureka}
      password: ${discovery.password:default}
eureka:
  instance:
    hostname: ${server.name:localhost}
    #securePort: ${server.port:8761}
    #securePortEnabled: true
    #nonSecurePortEnabled: false
    #secureVirtualHostName: ${spring.application.name}
    #homePageUrl: https://${eureka.instance.hostname}:${server.port}/
    #statusPageUrl: https://${eureka.instance.hostname}:${server.port}/admin/info
    metadataMap:
      hostname : ${eureka.instance.hostname}
      #securePort: ${server.port} 
  client:
    registerWithEureka: false
    fetchRegistry: false
  server:
    enableSelfPreservation: true
    
---

spring:
    profiles: aws-ci
  
logging:
  level: 
    com.netflix: DEBUG
    org.springframework.cloud.netflix: DEBUG

eureka:     
  datacenter: cloud
  server: 
    enable-self-preservation: true
  client: 
   registerWithEureka: true
---

spring:
    profiles: aws-dev
  
logging:
  level: 
    com.netflix: DEBUG
    org.springframework.cloud.netflix: DEBUG

eureka: 
  #region: us-east-1
  #us-east-1: 
    #availabilityZones: us-east-1a,us-east-1b
    #serviceUrl: 
       #us-east-1a: http://discovery:eurekacloud@ec2-34-205-83-218.compute-1.amazonaws.com:8761/eureka/,http://discovery:eurekacloud@ec2-52-207-219-80.compute-1.amazonaws.com:8761/eureka/
  #eureka server replication can be batched to improve efficiency
  shouldBatchReplication: true
  #In the AWS cloud environment, pass in the java commandline property -Deureka.datacenter=cloud so that 
  #the Eureka Client/Server knows to initialize the information specific to AWS cloud.
  datacenter: cloud
  #enableSelfPreservation: false
  #shouldUseDns: true
  #eurekaServer: 
    #domainName: ascentconf.vpc
    #port: 8761
    #context: eureka
  #instance: 
    #hostname: ec2-34-205-83-218.compute-1.amazonaws.com
    #preferIpAddress: true
    #ip-address: 34.205.83.218
    #non-secure-port: ${server.port}
  server: 
    enable-self-preservation: true
    #bindingStrategy: ROUTE53
    #route53DomainTTL: 30
    #waitTimeInMsWhenSyncEmpty: 0
    #enableSelfPreservation: true
    #aWSAccessId: AWS_KEY
    #aWSSecretKey: AWS_SECRET_KEY
    #asgName: ascent-discovery-cluster
 ### txt.us-east-1.eureka.local
  client: 
   # Set to false as this config is for the eureka client in the eureka server itself.
   # The eureka clients running in eureka server needs to connect to servers in other zones.
   #
   # For other applications this should not be set (default to true) for better zone based load balancing.
   #preferSameZone: false
   # for the eureka server's own client config, set on-demand update to false as it may be too quick for the REST
   # resource initialization
   #shouldOnDemandUpdateStatusChange: false
   #region: default
   #serviceUrl:
     #defaultZone: http://discovery:eurekacloud@ec2-34-205-83-218.compute-1.amazonaws.com:8761/eureka/,http://discovery:eurekacloud@ec2-52-207-219-80.compute-1.amazonaws.com:8761/eureka/
   #eurekaServerURLContext: eureka
   registerWithEureka: true
   #fetchRegistry: true
   #eurekaServerDNSName: ascentconf.vpc
   #eurekaServerPort: 8761
   #useDnsForFetchingServiceUrls: true
   #region: us-east-1
   #availabilityZones:
     #us-east-1: 'us-east-1a'
---

spring:
    profiles: aws-stage
  
logging:
  level: 
    com.netflix: WARN
    org.springframework.cloud.netflix: WARN

eureka: 
  shouldBatchReplication: true
  #In the AWS cloud environment, pass in the java commandline property -Deureka.datacenter=cloud so that 
  #the Eureka Client/Server knows to initialize the information specific to AWS cloud.
  datacenter: cloud
  server: 
    enable-self-preservation: true
  client: 
   registerWithEureka: true
---

spring:
    profiles: aws-prod
  
logging:
  level: 
    com.netflix: WARN
    org.springframework.cloud.netflix: WARN

eureka: 
  shouldBatchReplication: true
  #In the AWS cloud environment, pass in the java commandline property -Deureka.datacenter=cloud so that 
  #the Eureka Client/Server knows to initialize the information specific to AWS cloud.
  datacenter: cloud
  server: 
    enable-self-preservation: true
  client: 
   registerWithEureka: true